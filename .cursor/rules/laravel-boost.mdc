---
alwaysApply: true
---

<laravel-boost-guidelines>
=== foundation rules ===

# Laravel Boost Guidelines

The Laravel Boost guidelines are specifically curated by Laravel maintainers for this application, follow them closely to enhance developer experience and maintain consistency.

## Foundational Context

This application is a Laravel application and its main Laravel ecosystem packages and versions are below. You are an expert with them all, and you must abide by these specific packages and versions.

* php - 8.3.1
* inertiajs/inertia-laravel (INERTIA) - v2
* laravel/fortify (FORTIFY) - v1
* laravel/framework (LARAVEL) - v12
* laravel/prompts (PROMPTS) - v0
* laravel/socialite (SOCIALITE) - v5
* laravel/wayfinder (WAYFINDER) - v0
* laravel/mcp (MCP) - v0
* laravel/pint (PINT) - v1
* laravel/sail (SAIL) - v1
* pestphp/pest (PEST) - v4
* phpunit/phpunit (PHPUNIT) - v12
* @inertiajs/react (INERTIA) - v2
* react (REACT) - v19
* tailwindcss (TAILWINDCSS) - v4
* @laravel/vite-plugin-wayfinder (WAYFINDER) - v0
* eslint (ESLINT) - v9
* prettier (PRETTIER) - v3

## Conventions

* Follow existing code conventions used in this application. When creating or editing a file, check sibling files for structure, approach, naming.
* Use descriptive names for variables and methods.
* Reuse existing components before writing new ones.

## Verification Scripts

* Do not create verification scripts or tinker when tests cover that functionality.

## Application Structure & Architecture

* Stick to existing directory structure.
* Do not change dependencies without approval.

## Frontend Bundling

* If frontend changes do not appear, ask the user to run `npm run build`, `npm run dev`, or `composer run dev`.

## Replies

* Be concise in explanations, focus on important details.

## Documentation Files

* Create documentation files only if explicitly requested.

=== boost rules ===

## Laravel Boost

* Laravel Boost is an MCP server that comes with powerful tools designed specifically for this application. Use them.

## Artisan

* Use the `list-artisan-commands` tool when you need to call an Artisan command to double check parameters.

## URLs

* When sharing project URLs, use the `get-absolute-url` tool to ensure correct scheme, domain and port.

## Tinker / Debugging

* Use the `tinker` tool when you need to execute PHP to debug code or query Eloquent models directly.
* Use the `database-query` tool when you only need to read from the database.

## Searching Documentation

* Use `search-docs` before other approaches for Laravel-ecosystem documentation. Pass package list when known.

=== wayfinder/core rules ===

## Laravel Wayfinder

* Use Laravel Wayfinder to generate type-safe, callable TypeScript helpers for backend routes and controller actions, prefer this over hardcoding routes in the frontend.
* Ensure `@laravel/vite-plugin-wayfinder` is installed and configured in `vite.config.ts`, and that Wayfinder generation is included in the developer workflow, for example in deployment scripts or local build steps.
* Generated TypeScript files are placed under `resources/js/wayfinder` by default, verify the actual path in the project and add the folder to your editors TypeScript include paths if needed.

## Generating Actions

* When routes or controllers change, run the Wayfinder artisan generator, for example `php artisan wayfinder:generate --with-form`, to regenerate typed helpers, including the `form` helper for POST actions.
* Add a CI or local developer script, for example `composer wayfinder:generate` or an npm script, to ensure generated files stay in sync with backend routes.

## Frontend Usage, Inertia + React

* Use the generated helpers with Inertia forms and fetch calls. For form submissions prefer the generated `*.form()` helper, it returns the correct action URL and method to pass into Inertia's `useForm` or `<Form>` component.
* Example patterns to follow, prefer FormRequest validation on the backend, and import the generated helpers by their generated path, e.g. `import { store } from '@/actions/App/Http/Controllers/PostController'`.

### Recommended workflow for a create form

1, Create a FormRequest class for validation, use artisan, for example `php artisan make:request StorePostRequest`, apply it to the controller store method.
2, Use `php artisan wayfinder:generate --with-form` after adding routes or controllers.
3, In the frontend, use Inertia `useForm` or `<Form>` with the `store()` helper, for example `post(store())`, or use `<Form action={store().url} method={store().method}>`.
4, Handle server validation errors with the standard Inertia error handling, do not serialize overly large payloads.

### Recommended workflow for fetching a resource

1, Use the generated `show.url({ post: id })` to get a typed URL for client side fetch calls.
2, Prefer Inertia server-side rendering when the data is required for initial page load, use `Inertia::render()` with props.

## File paths and Imports

* Verify the generated import paths after running the generator. The example import paths are project specific and may include `actions/App/Http/Controllers/<ControllerName>`.
* If the project customizes the Wayfinder output path, document that in the repo README.

## Testing

* Include tests that verify controllers respond as expected. When testing frontend integration, assert the generated helper exists and returns the correct `url` and `method`, for example by asserting the generated file exists and parsing the helper signature.
* For important forms, consider an integration test using Pest and a browser test that submits as a real user would.

## Security and Validation

* Always use FormRequest classes for controller validation, never rely on the frontend for validation alone.
* Sanitize and cast incoming data in the model with `$casts()` or a `casts()` method as per project conventions.

## Common Pitfalls and Guidance

* If you see stale generated helpers, re-run `php artisan wayfinder:generate --with-form` and restart the dev server.
* When changing route names, ensure the generated helpers are regenerated and referenced imports updated.
* Use the `--with-form` flag to generate form helpers for POST, PUT and PATCH actions where helpful.

=== php rules ===

## PHP

* Always use curly braces for control structures.
* Use constructor property promotion, do not leave empty constructors.
* Use explicit return types and type hints.
* Prefer PHPDoc blocks for complex array shapes where appropriate.

=== inertia-laravel/core rules ===

## Inertia Core

* Inertia components live in `resources/js/Pages`.
* Use `Inertia::render()` for server side routing.

=== inertia-laravel/v2 rules ===

## Inertia v2

* Use v2 features, deferred props and empty states when needed.
* Prefer the `<Form>` component or `useForm` helper for forms.

=== laravel/core rules ===

## Do Things the Laravel Way

* Use `php artisan make:` commands for scaffolding.
* Prefer Eloquent relationships and eager loading to avoid N+1 queries.
* Use FormRequest classes for validation.
* Use queued jobs for long running tasks.

=== tailwindcss/v4 rules ===

## Tailwind 4

* Use Tailwind CSS v4 only.
* Import tailwind using `@import "tailwindcss"` not `@tailwind` directives.
* Do not use deprecated utilities from v3.

=== tests rules ===

## Test Enforcement

* Every change must be programmatically tested, write or update tests accordingly.

## Use bun instead of npm

1, Project defaults, prefer bun for installing and running JS dependencies and scripts, update README and CI to make bun the canonical runner.

2, package.json guidance, include a clear scripts section that works with bun, for example,

"scripts": {
    "dev": "vite",
    "build": "vite build",
    "test": "bun run vitest",
    "start": "bun run dev"
}

3, developer workflow, use the following commands in local development and CI,

# install bun, add to PATH
curl -fsSL https://bun.sh/install | bash
export PATH="$HOME/.bun/bin:$PATH"


# install dependencies, same as npm install
bun install


# run dev server
bun run dev


# build for production
bun run build

4, CI and scripts, make a fallback to node/npm only where unavoidable, but prefer bun in all developer scripts and documentation, also add an engines hint to package.json if desired, for example "engines": { "bun": ">=1.0.0" }.

</laravel-boost-guidelines>
